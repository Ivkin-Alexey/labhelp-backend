import { isBuffer } from 'util'
import { prisma } from '../../../index.js'
import {
  defaultEquipmentPage,
  equipmentPageSize,
  fieldsToSearch,
  searchConfig,
  filterFieldsConfig,
  invalidEquipmentCellData,
} from '../../assets/constants/equipments.js'
import localizations from '../../assets/constants/localizations.js'
import { fetchEquipmentListFromGSheet } from '../../controllers/equipment-controller/g-sheet.js'
import { sendNotification } from '../../controllers/tg-bot-controllers/botAnswers.js'
import { clearTable } from '../common.js'
import { transformEquipmentInfo, transformEquipmentList } from '../helpers.js'
import { isIdDataValid } from '../../controllers/equipment-controller/helpers.js'
import { handleDatabaseConnectionError } from '../../utils/dbConnectionHandler.js'
import { notifyAdmins } from '../../services/telegram-notifier.js'

function isPrismaConnectionError(error) {
  return error?.code?.startsWith('P100') || error?.errorCode?.startsWith('P100') || 
         (error?.message && error.message.includes("Can't reach database server"))
}

export async function createTrgmIndexes() {
  try {
    console.info('–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥—Ä–∞–º–º–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pg_trgm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    try {
      const extensionExists = await prisma.$queryRaw`
        SELECT EXISTS(
          SELECT 1 FROM pg_extension WHERE extname = 'pg_trgm'
        ) as exists
      `
      const exists = extensionExists[0]?.exists || false
      
      if (!exists) {
        console.info('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è pg_trgm...')
        await prisma.$executeRawUnsafe(`CREATE EXTENSION IF NOT EXISTS pg_trgm;`)
        console.info('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pg_trgm —Å–æ–∑–¥–∞–Ω–æ')
      } else {
        console.info('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pg_trgm —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pg_trgm: ${error.message}`)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å IF NOT EXISTS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ SQL —Å–∫—Ä–∏–ø—Ç–µ)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º IF NOT EXISTS —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã
    const indexesToCreate = [
      { name: 'idx_equipment_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_name_trgm ON "Equipment" USING gin(name gin_trgm_ops)` },
      { name: 'idx_equipment_description_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_description_trgm ON "Equipment" USING gin(description gin_trgm_ops)` },
      { name: 'idx_equipment_brand_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_brand_trgm ON "Equipment" USING gin(brand gin_trgm_ops)` },
      { name: 'idx_equipment_serial_number_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_serial_number_trgm ON "Equipment" USING gin("serialNumber" gin_trgm_ops)` },
      { name: 'idx_equipment_inventory_number_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_inventory_number_trgm ON "Equipment" USING gin("inventoryNumber" gin_trgm_ops)` },
      { name: 'idx_equipment_category_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_category_trgm ON "Equipment" USING gin(category gin_trgm_ops)` },
      { name: 'idx_model_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_model_name_trgm ON "Model" USING gin(name gin_trgm_ops)` },
      { name: 'idx_department_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_department_name_trgm ON "Department" USING gin(name gin_trgm_ops)` },
      { name: 'idx_classification_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_classification_name_trgm ON "Classification" USING gin(name gin_trgm_ops)` },
      { name: 'idx_measurement_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_measurement_name_trgm ON "Measurement" USING gin(name gin_trgm_ops)` },
      { name: 'idx_equipment_type_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_type_name_trgm ON "EquipmentType" USING gin(name gin_trgm_ops)` },
      { name: 'idx_equipment_kind_name_trgm', sql: `CREATE INDEX IF NOT EXISTS idx_equipment_kind_name_trgm ON "EquipmentKind" USING gin(name gin_trgm_ops)` },
    ]
    
    let createdCount = 0
    let failedCount = 0
    const failedIndexes = []
    
    for (const { name, sql } of indexesToCreate) {
      try {
        await prisma.$executeRawUnsafe(sql)
        createdCount++
        console.info(`‚úÖ –ò–Ω–¥–µ–∫—Å ${name} —Å–æ–∑–¥–∞–Ω`)
      } catch (error) {
        failedCount++
        failedIndexes.push(name)
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å ${name}: ${error.message}`)
        console.error(`   SQL: ${sql}`)
      }
    }
    
    console.info(`‚úÖ –¢—Ä–∏–≥—Ä–∞–º–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã: ${createdCount} –∏–∑ ${indexesToCreate.length} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã`)
    if (failedCount > 0) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${failedCount} –∏–Ω–¥–µ–∫—Å–æ–≤: ${failedIndexes.join(', ')}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    try {
      const indexCount = await prisma.$queryRaw`
        SELECT COUNT(*)::int as count 
        FROM pg_indexes 
        WHERE schemaname = 'public' AND indexname LIKE '%_trgm%'
      `
      const actualCount = indexCount[0]?.count || 0
      console.info(`üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∏–≥—Ä–∞–º–º–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ë–î: ${actualCount}`)
      
      if (actualCount < indexesToCreate.length) {
        console.warn(`‚ö†Ô∏è –û–∂–∏–¥–∞–ª–æ—Å—å ${indexesToCreate.length} –∏–Ω–¥–µ–∫—Å–æ–≤, –Ω–∞–π–¥–µ–Ω–æ ${actualCount}`)
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤: ${error.message}`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥—Ä–∞–º–º–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message)
    console.error('Stack:', error.stack)
    throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
  }
}

export async function getEquipmentList(login, isAuthenticated) {
  try {
    let results
    if (login && isAuthenticated) {
      // @ts-ignore
      let rowData = await prisma.Equipment.findMany({
        include: {
          favoriteEquipment: {
            where: { login },
          },
          operatingEquipment: true,
        },
        orderBy: {
          imgUrl: 'desc', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –∞ —Ç–æ—á–Ω–µ–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ—Ç –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        },
      })

      results = rowData.map(transformEquipmentList)
      } else {
        // @ts-ignore
        results = await prisma.Equipment.findMany()
      }

    return results
  } catch (error) {
    const status = error.status || 500
    const errorMsg =
      error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è): ' + error
    throw { message: errorMsg, status }
  } finally {
    await prisma.$disconnect()
  }
}

export async function getEquipmentByID(equipmentId, login, isAuthenticated) {
  try {
    // @ts-ignore
    let equipment = await prisma.Equipment.findUnique({
      where: {
        id: equipmentId,
      },
      include: {
        model: true,
        department: true,
        classification: true,
        measurements: true,
        type: true,
        kind: true,
        ...(login && isAuthenticated ? {
          favoriteEquipment: {
            where: { login },
          },
          operatingEquipment: true,
        } : {})
      },
    })
    equipment = transformEquipmentInfo(equipment)

    if (!equipment) {
      const msg = `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å Id ${equipmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î (–ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É)`
      throw { message: msg, status: 404 }
    } else {
      // @ts-ignore
      const res = await prisma.Equipment.findMany({
        where: {
          model: {
            name: equipment.model
          },
          department: {
            name: equipment.department
          }
        },
      });
      return { ...equipment, count: res.length, sameList: res.map(x => x.id) }
    }
  } catch (error) {
    const status = error.status || 500
    const errorMsg = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É): ' + error
    throw { message: errorMsg, status }
  } finally {
    await prisma.$disconnect()
  }
}

export async function getEquipmentByIDs(equipmentIds, login, isAuthenticated) {
  try {
    const equipments = await Promise.all(equipmentIds.map(async (equipmentId) => {
      let equipment
      if (login && isAuthenticated) {
        // @ts-ignore
        let rowData = await prisma.Equipment.findUnique({
          where: {
            id: equipmentId,
          },
          include: {
            model: true,
            department: true,
            classification: true,
            measurements: true,
            type: true,
            kind: true,
            favoriteEquipment: {
              where: { login },
            },
            operatingEquipment: true,
          },
        })

        equipment = rowData ? transformEquipmentInfo(rowData) : null
      } else {
        // @ts-ignore
        let rowData = await prisma.Equipment.findUnique({
          where: {
            id: equipmentId,
          },
          include: {
            model: true,
            department: true,
            classification: true,
            measurements: true,
            type: true,
            kind: true,
          },
        })
        
        equipment = rowData ? transformEquipmentInfo(rowData) : null
      }

      if (!equipment) {
        const msg = `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å Id ${equipmentId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î`
        throw { message: msg, status: 404 }
      } else {
        return equipment
      }
    }))

    return equipments
  } catch (error) {
    const status = error.status || 500
    const errorMsg = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error
    throw { message: errorMsg, status }
  } finally {
    await prisma.$disconnect()
  }
}

export async function getEquipmentListByCategory(category, login, isAuthenticated) {
  try {
    let results
    if (login && isAuthenticated) {
      // @ts-ignore
      let rowData = await prisma.Equipment.findMany({
        where: {
          category,
        },
        orderBy: {
          imgUrl: 'desc', // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, –∞ —Ç–æ—á–Ω–µ–µ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ—Ç –ø–æ –Ω–∞–ª–∏—á–∏—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        },
        include: {
          favoriteEquipment: {
            where: { login },
          },
          operatingEquipment: true,
        },
      })

      results = rowData.map(transformEquipmentList)
    } else {
      // @ts-ignore
      results = await prisma.Equipment.findMany({
        where: {
          category,
        },
      })
    }

    return results
  } catch (error) {
    const status = error.status || 500
    const errorMsg =
      error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è): ' + error
    throw { message: errorMsg, status }
  } finally {
    await prisma.$disconnect()
  }
}

export async function getEquipmentListBySearch(searchTerm, login, isAuthenticated, filters, page = defaultEquipmentPage, pageSize = equipmentPageSize) {
  try {
    // 1. –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
    const searchConditions = searchTerm ? {
      OR: searchConfig.map(config => {
        if (config.relation) {
          return {
            [config.relation]: {
              [config.field]: {
                contains: searchTerm,
                mode: 'insensitive'
              }
            }
          };
        } else {
          return {
            [config.field]: {
              contains: searchTerm,
              mode: 'insensitive'
            }
          };
        }
      })
    } : {};

    // 2. –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const filterConditions = filters && Object.entries(filters).flatMap(([key, values]) => {
      if (values.length > 0) {
        if (key === 'department') {
          return { department: { name: { in: values } } };
        }
        if (key === 'type') {
          return { type: { name: { in: values } } };
        }
        if (key === 'classification') {
          return { classification: { name: { in: values } } };
        }
        if (key === 'measurements') {
          return { measurements: { name: { in: values } } };
        }
        if (key === 'kind') {
          return { kind: { name: { in: values } } };
        }
        return { [key]: { in: values } };
      }
      return [];
    }) || [];

    const baseConditions = {
      ...(Object.keys(searchConditions).length > 0 ? searchConditions : {}),
      ...(filterConditions.length > 0 ? { AND: filterConditions } : {})
    };

    // 3. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const [groupedResults, totalCount, modelTotals, groupedAll] = await Promise.all([
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
      prisma.Equipment.groupBy({
        by: ['modelId', 'departmentId'],
        where: baseConditions,
        _count: { _all: true },
        orderBy: [{ modelId: 'asc' }, { departmentId: 'asc' }],
        skip: (page - 1) * pageSize,
        take: pageSize
      }),
      
      // –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
      prisma.Equipment.count({ where: baseConditions }),
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –º–æ–¥–µ–ª—è–º
      prisma.Equipment.groupBy({
        by: ['modelId'],
        where: baseConditions,
        _count: { _all: true }
      }),

      // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã modelId+departmentId) –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      prisma.Equipment.groupBy({
        by: ['modelId', 'departmentId'],
        where: baseConditions,
        _count: { _all: true }
      })
    ]);

    const modelIdToTotal = new Map(modelTotals.map(x => [x.modelId, x._count._all]));

    // 4. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º
    const enriched = await Promise.all(groupedResults.map(async g => {
      const representative = await prisma.Equipment.findFirst({
        where: { 
          modelId: g.modelId, 
          departmentId: g.departmentId, 
          ...baseConditions 
        },
        include: {
          model: true,
          department: true,
          ...(login && isAuthenticated ? {
            favoriteEquipment: { where: { login } },
            operatingEquipment: true,
          } : {})
        },
        orderBy: [{ imgUrl: 'desc' }]
      });

      if (!representative) return null;

      return transformEquipmentList({
        ...representative,
        quantity: g._count._all,
        totalQuantity: modelIdToTotal.get(g.modelId) || g._count._all,
      });
    }));

    const results = enriched.filter(Boolean);

    return { 
      results, 
      totalEquipmentCards: groupedAll.length,
      totalEquipmentUnits: totalCount,
      page, 
      pageSize 
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Prisma –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (isPrismaConnectionError(error)) {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${error.message || '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î'}`
      await sendNotification(errorMessage)
      throw { message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', status: 503 }
    }
    
    const status = error.status || 500;
    const errorMsg = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error;
    throw { message: errorMsg, status };
  }
}

export async function createEquipmentDbFromGSheet(botLogs = true) {
  async function createAllTablesAndFilters(list) {
    
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tableData = {}
    
    // Departments
    const departments = list.reduce((acc, x) => {
      const trimmed = x.department?.trim()
      if (isIdDataValid(trimmed)) {
        acc.add(trimmed)
      }
      return acc
    }, new Set())
    tableData.department = [...departments].map((x, i) => ({ id: i + 1, name: x }))
    
    // Models
    const models = list.reduce((acc, x) => {
      const trimmed = x.model && x.model.trim()
      if (isIdDataValid(trimmed)) {
        acc.add(trimmed)
      }
      return acc
    }, new Set())
    tableData.model = [...models].map((x, i) => ({ id: i + 1, name: x }))
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º department –∏ model, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
    filterFieldsConfig.forEach(config => {
      if (config.field === 'department' || config.field === 'model') {
        return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º department –∏ model, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
      }
      const values = new Set()
      list.forEach(equipment => {
        const value = equipment[config.field]
        if (value && value.trim()) {
          values.add(value.trim())
        }
      })
      tableData[config.field] = Array.from(values).sort()
    })
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const promises = []
    
    // Departments
    promises.push(
      // @ts-ignore
      prisma.Department.createMany({
        skipDuplicates: true,
        data: tableData.department,
      }).then(result => console.log(`–¢–∞–±–ª–∏—Ü–∞ Department –æ–±–Ω–æ–≤–ª–µ–Ω–∞`))
    )
    
    // Models
    promises.push(
      // @ts-ignore
      prisma.Model.createMany({
        skipDuplicates: true,
        data: tableData.model,
      }).then(result => console.log(`–¢–∞–±–ª–∏—Ü–∞ Model –æ–±–Ω–æ–≤–ª–µ–Ω–∞`))
    )
    
    // Filter tables (–∏—Å–∫–ª—é—á–∞–µ–º department –∏ model, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ createMany)
    filterFieldsConfig.forEach(config => {
      if (config.field === 'department' || config.field === 'model') {
        return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º department –∏ model, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤—ã—à–µ
      }
      const values = tableData[config.field]
      if (values.length > 0) {
        promises.push(
          Promise.all(
            values.map(name => 
              prisma[config.tableName].upsert({
                where: { name },
                update: {},
                create: { name }
              })
            )
          ).then(() => console.log(`–¢–∞–±–ª–∏—Ü–∞ ${config.tableName} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`))
        )
      }
    })
    
    await Promise.all(promises)
    console.log('–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
  }


  try {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    // @ts-ignore
    await clearTable(prisma.Equipment)
    // @ts-ignore
    await clearTable(prisma.Department)
    // @ts-ignore
    await clearTable(prisma.Model)
    // @ts-ignore
    await clearTable(prisma.Classification)
    // @ts-ignore
    await clearTable(prisma.Measurement)
    // @ts-ignore
    await clearTable(prisma.EquipmentType)
    // @ts-ignore
    await clearTable(prisma.EquipmentKind)
    
    console.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...')
    const list = await fetchEquipmentListFromGSheet()
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    await createAllTablesAndFilters(list)
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
    await createEquipmentWithRelations(list)
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥—Ä–∞–º–º–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
    await createTrgmIndexes()
    
    console.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ GSheet:', error)
    throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  } finally {
    await prisma.$disconnect()
  }

  return localizations.equipment.dbIsReloadedMsg
}

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –ë–î (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export async function getEquipmentFilters() {
  try {
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const prismaQueries = filterFieldsConfig.map(config => {
      return prisma[config.tableName].findMany({ 
        select: { id: true, name: true },
        orderBy: { name: 'asc' } 
      })
    })

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    const results = await Promise.all(prismaQueries)

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const dataMap = {}
    filterFieldsConfig.forEach((config, index) => {
      dataMap[config.field] = results[index]
    })

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ —Ü–∏–∫–ª–µ
    const filters = filterFieldsConfig.map(config => ({
      name: config.field,
      label: config.label,
      options: dataMap[config.field]
        .map(item => item.name)
        .filter(name => !invalidEquipmentCellData.includes(name))
    }))
    
    return filters
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Prisma –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (isPrismaConnectionError(error)) {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: ${error.message || '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î'}`
      await sendNotification(errorMessage)
      throw { message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', status: 503 }
    }
    
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function createEquipmentWithRelations(equipmentList) {
  try {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–æ —Å–≤—è–∑—è–º–∏...')
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ + –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const prismaQueries = [
      prisma.model.findMany({ select: { id: true, name: true } }),
      prisma.department.findMany({ select: { id: true, name: true } }),
      ...filterFieldsConfig.map(config => 
        prisma[config.tableName].findMany({ select: { id: true, name: true } })
      )
    ]

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    const results = await Promise.all(prismaQueries)
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const [models, departments] = results
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterData = {}
    filterFieldsConfig.forEach((config, index) => {
      filterData[config.field] = results[index + 2] // +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–≤—ã–µ –¥–≤–∞ - —ç—Ç–æ models –∏ departments
    })

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const modelMap = new Map(models.map(m => [m.name, m.id]))
    const departmentMap = new Map(departments.map(d => [d.name, d.id]))
    
    const filterMaps = {}
    filterFieldsConfig.forEach(config => {
      filterMaps[config.field] = new Map(
        filterData[config.field].map(item => [item.name, item.id])
      )
    })

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    const validEquipment = equipmentList.filter(x => 
      isIdDataValid(x.model?.trim()) && 
      isIdDataValid(x.department?.trim())
    )

    const BATCH_SIZE = 10
    let successfulRecordsCount = 0

    for (let i = 0; i < validEquipment.length; i += BATCH_SIZE) {
      const batch = validEquipment.slice(i, i + BATCH_SIZE)
      
      const processedBatch = batch.map(equipment => {
        const processedData = { ...equipment }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∏
        if (equipment.model) {
          const modelId = modelMap.get(equipment.model.trim())
          if (modelId) {
            processedData.modelId = modelId
            delete processedData.model
          }
        }

        if (equipment.department) {
          const departmentId = departmentMap.get(equipment.department.trim())
          if (departmentId) {
            processedData.departmentId = departmentId
            delete processedData.department
          }
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filterFieldsConfig.forEach(config => {
          const value = equipment[config.field]
          if (value && value.trim()) {
            const id = filterMaps[config.field].get(value.trim())
            if (id) {
              // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è measurements
              const fieldId = config.field === 'measurements' ? 'measurementId' : `${config.field}Id`
              processedData[fieldId] = id
            }
          }
          delete processedData[config.field]
        })

        return processedData
      })

      try {
        await prisma.$transaction(
          processedBatch.map(data => prisma.Equipment.create({ data }))
        )
        successfulRecordsCount += processedBatch.length
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      }
    }

    console.log(`–°–æ–∑–¥–∞–Ω–æ ${successfulRecordsCount} –∑–∞–ø–∏—Å–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–æ —Å–≤—è–∑—è–º–∏`)
    try {
      await notifyAdmins(`–°–æ–∑–¥–∞–Ω–æ ${successfulRecordsCount} –∑–∞–ø–∏—Å–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–æ —Å–≤—è–∑—è–º–∏`)
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ seed —Å–∫—Ä–∏–ø—Ç–∞
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º:', error.message)
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–æ —Å–≤—è–∑—è–º–∏:', error)
    throw error
  }
}

export async function getEquipmentCount() {
  try {
    // @ts-ignore
    const count = await prisma.Equipment.count()
    return count
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Prisma –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (isPrismaConnectionError(error)) {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${error.message || '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î'}`
      await sendNotification(errorMessage)
      throw { message: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', status: 503 }
    }
    
    throw error
  } finally {
    await prisma.$disconnect()
  }
}

